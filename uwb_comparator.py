#!/usr/bin/env python3
"""
Sistema Integrado de Comparaci√≥n de Sesiones UWB - TFG F√∫tbol Sala
==================================================================

Herramienta consolidada que combina:
- Comparaci√≥n de m√∫ltiples sesiones (ex session_comparator.py)
- Generaci√≥n de datos de prueba (ex futsal_movement_generator.py)

Autor: TFG Sistema UWB F√∫tbol Sala
Versi√≥n: 2.0 - Consolidada
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import glob
import math
import random
from datetime import datetime, timedelta
import argparse

class UWBComparator:
    def __init__(self, output_dir="outputs/comparisons"):
        self.sessions = {}
        self.metrics = {}
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
    def load_session(self, csv_file, session_name=None):
        """Cargar una sesi√≥n de entrenamiento"""
        if session_name is None:
            session_name = os.path.basename(csv_file).replace('.csv', '')
        
        try:
            # Mostrar informaci√≥n de procesamiento
            folder_name = os.path.dirname(csv_file)
            file_name = os.path.basename(csv_file)
            print(f"     üìÅ {folder_name}/{file_name}")
            
            df = pd.read_csv(csv_file)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            print(f"     üìä {len(df)} registros cargados")
            
            # Calcular m√©tricas b√°sicas
            metrics = self._calculate_metrics(df)
            
            self.sessions[session_name] = {
                'data': df,
                'metrics': metrics,
                'file': csv_file,
                'folder': folder_name
            }
            
            duration = metrics['total_time']
            distance = metrics['total_distance']
            print(f"     ‚úÖ Duraci√≥n: {duration:.1f}s, Distancia: {distance:.1f}m")
            
        except Exception as e:
            print(f"     ‚ùå Error: {e}")
    
    def _calculate_metrics(self, df):
        """Calcular m√©tricas de sesi√≥n"""
        df['dt'] = df['timestamp'].diff().dt.total_seconds()
        df['dx'] = df['x'].diff()
        df['dy'] = df['y'].diff()
        df['distance'] = np.sqrt(df['dx']**2 + df['dy']**2)
        df['velocity'] = df['distance'] / df['dt']
        
        total_time = (df.iloc[-1]['timestamp'] - df.iloc[0]['timestamp']).total_seconds()
        total_distance = df['distance'].sum()
        avg_speed = df['velocity'].mean()
        max_speed = df['velocity'].max()
        
        return {
            'total_time': total_time,
            'total_distance': total_distance,
            'avg_speed': avg_speed,
            'max_speed': max_speed
        }
    
    def compare_sessions(self):
        """Comparar todas las sesiones cargadas"""
        if len(self.sessions) < 2:
            print("‚ùå Se necesitan al menos 2 sesiones")
            return None
        
        print("\nüîç COMPARACI√ìN DE SESIONES")
        print("=" * 50)
        
        metrics_df = pd.DataFrame()
        for session_name, session_data in self.sessions.items():
            metrics_series = pd.Series(session_data['metrics'])
            metrics_df[session_name] = metrics_series
        
        print("\nüìä TABLA COMPARATIVA:")
        
        # Configurar pandas para mostrar todas las columnas
        pd.set_option('display.max_columns', None)
        pd.set_option('display.width', None)
        pd.set_option('display.max_colwidth', None)
        
        print(metrics_df.round(2).to_string())
        
        # Restaurar configuraci√≥n por defecto
        pd.reset_option('display.max_columns')
        pd.reset_option('display.width') 
        pd.reset_option('display.max_colwidth')
        
        # Mostrar resumen de m√©tricas
        print(f"\nüìà RESUMEN:")
        print(f"   üìè Distancia promedio: {metrics_df.loc['total_distance'].mean():.1f}m")
        print(f"   üèÉ Velocidad promedio: {metrics_df.loc['avg_speed'].mean():.2f} m/s")
        print(f"   ‚ö° Velocidad m√°xima: {metrics_df.loc['max_speed'].max():.2f} m/s")
        
        return metrics_df
    
    def generate_test_session(self, scenario="professional", duration=120):
        """Generar sesi√≥n de prueba"""
        print(f"üîß Generando sesi√≥n: {scenario}")
        
        total_frames = duration * 25  # 25 FPS
        movements = []
        timestamps = []
        start_time = datetime.now()
        
        x, y = 20, 10  # Centro cancha
        
        for frame in range(total_frames):
            t = frame / 25
            
            if scenario == "professional":
                target_x = 20 + 15 * math.sin(t * 0.2)
                target_y = 10 + 6 * math.cos(t * 0.3)
                speed = 0.2
            else:  # amateur
                target_x = 20 + 10 * math.sin(t * 0.1)
                target_y = 10 + 4 * math.cos(t * 0.15)
                speed = 0.1
            
            dx = (target_x - x) * speed
            dy = (target_y - y) * speed
            
            x += dx + random.uniform(-0.3, 0.3)
            y += dy + random.uniform(-0.2, 0.2)
            
            x = max(2, min(38, x))
            y = max(2, min(18, y))
            
            timestamp = start_time + timedelta(seconds=frame / 25)
            movements.append((x, y))
            timestamps.append(timestamp)
        
        # Crear DataFrame con ruido
        df = pd.DataFrame({
            'timestamp': timestamps,
            'tag_id': ['J07'] * len(timestamps),
            'x': [pos[0] + np.random.normal(0, 0.15) for pos in movements],
            'y': [pos[1] + np.random.normal(0, 0.15) for pos in movements]
        })
        
        # Guardar
        output_file = f"test_{scenario}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        output_path = os.path.join("data", output_file)
        os.makedirs("data", exist_ok=True)
        
        df.to_csv(output_path, index=False)
        print(f"üíæ Guardado: {output_path}")
        
        return output_path

def select_comparison_files():
    """Selecci√≥n interactiva de archivos para comparaci√≥n"""
    print("üèüÔ∏è COMPARADOR UWB PARA F√öTBOL SALA")
    print("=" * 60)
    
    print("\nüìÅ SELECCIONAR DIRECTORIO PARA COMPARACI√ìN:")
    print("=" * 50)
    print("1. üìä processed_data/ - Datos ya procesados")
    print("2. üì• data/ - Datos originales")
    print("3. üîç Buscar en ambos directorios")
    print("4. üéØ Selecci√≥n manual archivo por archivo")
    print("0. ‚ùå Cancelar")
    
    while True:
        try:
            dir_choice = input("\nüëÜ Selecciona opci√≥n (0-4): ").strip()
            
            if dir_choice == '0':
                print("‚ùå Operaci√≥n cancelada")
                return None
            elif dir_choice == '1':
                csv_files = glob.glob("processed_data/*.csv")
                search_path = "üìä processed_data/"
                break
            elif dir_choice == '2':
                csv_files = glob.glob("data/*.csv")
                search_path = "üì• data/"
                break
            elif dir_choice == '3':
                csv_files = glob.glob("processed_data/*.csv") + glob.glob("data/*.csv")
                search_path = "üîç ambos directorios"
                break
            elif dir_choice == '4':
                return select_manual_files()
            else:
                print("‚ùå Opci√≥n inv√°lida. Selecciona 0, 1, 2, 3 o 4")
                continue
        except KeyboardInterrupt:
            print("\n‚ùå Operaci√≥n cancelada")
            return None
    
    if len(csv_files) < 2:
        print(f"‚ö†Ô∏è  Solo se encontraron {len(csv_files)} archivos en {search_path}")
        print("üîß Se necesitan al menos 2 archivos para comparar")
        return None
    
    print(f"\nüìÅ ARCHIVOS ENCONTRADOS EN {search_path.upper()}:")
    print("=" * 70)
    
    files_to_load = csv_files[:5]  # M√°ximo 5 archivos
    for i, csv_file in enumerate(files_to_load, 1):
        file_name = os.path.basename(csv_file)
        file_size = os.path.getsize(csv_file) / 1024
        folder_icon = "üìä" if csv_file.startswith("processed_data") else "üì•"
        folder_name = "processed_data" if csv_file.startswith("processed_data") else "data"
        print(f"   {i}. {folder_icon} {folder_name}/{file_name} ({file_size:.1f} KB)")
    
    return files_to_load

def select_manual_files():
    """Selecci√≥n manual de archivos espec√≠ficos"""
    all_files = glob.glob("processed_data/*.csv") + glob.glob("data/*.csv")
    
    if not all_files:
        print("‚ùå No se encontraron archivos CSV")
        return None
    
    print(f"\nüìÅ TODOS LOS ARCHIVOS DISPONIBLES:")
    print("=" * 70)
    
    for i, file_path in enumerate(all_files, 1):
        file_name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path) / 1024
        folder_icon = "üìä" if file_path.startswith("processed_data") else "üì•"
        folder_name = "processed_data" if file_path.startswith("processed_data") else "data"
        print(f"{i:2d}. {folder_icon} {folder_name}/{file_name} ({file_size:.1f} KB)")
    
    selected_files = []
    print(f"\nüëÜ Selecciona archivos para comparar (m√≠nimo 2):")
    print("   Ingresa los n√∫meros separados por comas (ej: 1,3,5) o 0 para cancelar:")
    
    while True:
        try:
            choice = input("Opci√≥n: ").strip()
            
            if choice == '0':
                print("‚ùå Operaci√≥n cancelada")
                return None
            
            indices = [int(x.strip()) - 1 for x in choice.split(',')]
            
            if all(0 <= idx < len(all_files) for idx in indices) and len(indices) >= 2:
                selected_files = [all_files[idx] for idx in indices]
                break
            else:
                print("‚ùå Selecci√≥n inv√°lida. Necesitas al menos 2 archivos v√°lidos")
                
        except (ValueError, IndexError):
            print("‚ùå Formato inv√°lido. Usa n√∫meros separados por comas (ej: 1,3,5)")
        except KeyboardInterrupt:
            print("\n‚ùå Operaci√≥n cancelada")
            return None
    
    print(f"\n‚úÖ Archivos seleccionados para comparaci√≥n:")
    for file_path in selected_files:
        folder_name = "processed_data" if file_path.startswith("processed_data") else "data"
        print(f"   üìÑ {folder_name}/{os.path.basename(file_path)}")
    
    return selected_files

def main():
    # Seleccionar archivos
    selected_files = select_comparison_files()
    
    if selected_files is None:
        return
    
    print(f"\nüìç DIRECTORIO DE TRABAJO: {os.getcwd()}")
    
    comparator = UWBComparator()
    
    # Cargar sesiones seleccionadas
    print(f"\nüìã CARGANDO {len(selected_files)} SESIONES:")
    for csv_file in selected_files:
        print(f"   üîÑ Procesando: {os.path.basename(csv_file)}")
        comparator.load_session(csv_file)
    
    if len(comparator.sessions) >= 2:
        comparator.compare_sessions()
        print(f"\n‚úÖ COMPARACI√ìN COMPLETADA")
        print(f"üìÅ Resultados disponibles para {len(comparator.sessions)} sesiones")
    else:
        print("‚ùå No se pudieron cargar suficientes sesiones para comparar")

if __name__ == "__main__":
    main()